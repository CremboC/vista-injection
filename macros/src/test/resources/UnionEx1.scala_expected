object UnionEx1 {
  object gen$vista {
    trait AB extends A with B {
      override def one(): Int = super[A].one()
      override def three(): Int = super[B].three()
      override def two(): Int = super[A].two()
      override def zero: Int = super[A].zero
    }
  }
  trait Ap { def zero: Int = 0 }
  trait A extends Ap {
    def one(): Int = 1
    def two(): Int = 2
  }
  trait B {
    def two(): Int = 2
    def three(): Int = 3
  }
  def acceptsAB(ab: gen$vista.AB): Boolean = ab.isInstanceOf[gen$vista.AB]
  def main(args: Array[String]): Unit = {
    val a = new A
    val b = new B
    val ab = new gen$vista.AB {}
    println(ab.zero)
    println(ab.one())
    println(ab.two())
    println(ab.three())
    println(ab.isInstanceOf[A])
    println(ab.isInstanceOf[B])
    println(ab.isInstanceOf[gen$vista.AB])
    val f = new F
    println(f.five)
  }
}