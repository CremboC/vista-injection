object ForbidEx2 {
  object gen$vista {
    trait Aff extends A with gen$vista.Af {
      override def one: Int = super[A].one
      @scala.annotation.compileTimeOnly("Method <three> in type <Aff> is forbidden.") override def three: Int = throw new vista.lib.ForbiddenMethodException
      override def two: Int = super[A].two
    }
    trait Af extends A {
      @scala.annotation.compileTimeOnly("Method <one> in type <Af> is forbidden.") override def one: Int = throw new vista.lib.ForbiddenMethodException
      @scala.annotation.compileTimeOnly("Method <two> in type <Af> is forbidden.") override def two: Int = throw new vista.lib.ForbiddenMethodException
    }
    trait AA extends A with gen$vista.Af {
      override def one: Int = super[A].one
      override def three: Int = super[A].three
      override def two: Int = super[A].two
    }
  }
  trait A {
    def one: Int = 1
    def two: Int = 2
    def three: Int = 3
  }
  def mkForbid2(a: A, af: gen$vista.Af) = new gen$vista.Aff {}
  def mkForbid(a: A) = new gen$vista.Af {}
  def main(args: Array[String]): Unit = {
    val a = new A
    println(a.one)
    println(a.two)
    val af = mkForbid(a)
    val result = mkForbid2(a, af)
    println(result.one)
    println(af.isInstanceOf[A])
    val aAgain = new gen$vista.AA {}
    try {
      println(aAgain.one)
      println(aAgain.two)
    } catch {
      case e: NoSuchElementException =>
        println(e.getClass)
    }
  }
}