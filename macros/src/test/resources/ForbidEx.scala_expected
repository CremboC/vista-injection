object ForbidEx {
  object gen$vista {
    trait AnoSum extends A {
      @scala.annotation.compileTimeOnly("Method <sum> in type <AnoSum> is forbidden.")
      override def sum(items: Seq[Int]): Int = throw new vista.lib.ForbiddenMethodException
    }
  }
  trait A {
    def sum(items: Seq[Int]): Int = items.sum
    def convert[A, B <: A](a: A): B = {
      a.asInstanceOf[B]
    }
  }
  def main(args: Array[String]): Unit = {
    val a = new A
    println(a.sum(Seq(1, 2, 3)))
    val aWithoutSum = new gen$vista.AnoSum {}
    trait T
    trait Ta extends T
    if (true) {
      println(aWithoutSum.convert[T, Ta](new T))
      println("Converted")
    } else {
      println(s"convert is not part of $aWithoutSum")
    }
    if (false) {
      aWithoutSum.sum(Seq(1, 2, 3))
      println("Summed")
    } else {
      println(s"Sum is not part of $aWithoutSum")
    }
  }
}